## VIP layer must be projected (not GCS!), else hectares will not be computed correctly!!
import arcpy
import os
arcpy.env.workspace = r"E:\fix_noWM"
fcs = arcpy.ListFeatureClasses()
for fc in fcs:
    arcpy.CheckOutExtension("Spatial")
    arcpy.AddField_management(fc,"ha_NN","Double")   
    expression1 = "{0}".format("!SHAPE.area@HECTARES!")  
    try:      
        arcpy.CalculateField_management(fc, "ha_NN", expression1, "PYTHON")  
    except:
        print fc
        continue

## Distribution of sizes of each register compared to the sum of hectares by field NUT2 (sumha)
## percent code (run after we have finished sumHA/run first in another disk to compare): aunque lo rodamos porque consideramos que sumHA de ahora es igual al de antes (la suma de las hectáreas de CORINE por NUT2 tienen que se las mismas teselizadas o no)
import arcpy, os, numpy
from arcpy import env
arcpy.env.workspace = r"E:\fix_noWM"
fcs = arcpy.ListFeatureClasses()
for fc in fcs:
    field = arcpy.da.TableToNumPyArray (fc, "ha_NN", skip_nulls=True)
    name = 'prcntha_NN'  
    expression = '!ha_NN!/!sumha!'  
    arcpy.AddField_management(fc, name, "FLOAT","", "", "", name, "NULLABLE", "NON_REQUIRED", "")
    try:
        arcpy.CalculateField_management(fc, name, expression, "PYTHON_9.3")
    except:
        print fc
        continue

# SELECTION between hectares by NUT2 either of CORINE (sumha) either of EUROSTAT (EUHA_DEF): the field will be hectares by NUT2
## after percent, we can recalculate EUROSTATha (Eurostat hectares by NUT2 distributed in each row proportionally to its size (percentha_NN))
# herbaceous: siempre va a ser lo que diga eurostat, aunque sea 0, porque puede haber regadío en corine que no sean los cultivos eurostat que sirvan para biomasa
import os
import arcpy
import itertools
import csv
import numpy
folderPath = r"E:\fix_noWM" 
arcpy.env.workspace=folderPath
arcpy.env.overwriteOutput = True 
fcs = arcpy.ListFeatureClasses("*_21.shp","All")  ## APLICAR A LOS HERBÁCEOS 
for fc in fcs:
    expression = "miFunc(!Nut2!, !EUHA_DEF!, !sumha!)"
    codeblock = """def miFunc(miNut2, miEU, miSumaCOR):
        if miEU == 0:
            return miEU
        elif miEU > miSumaCOR:
            return miSumaCOR
        else:
            return miEU
        """
    try:
        arcpy.AddField_management(fc, "NN_EUHA", "FLOAT","", "", "", "NN_EUHA", "NULLABLE", "NON_REQUIRED", "")
        arcpy.CalculateField_management(fc, "NN_EUHA", expression, "PYTHON_9.3", codeblock)
    except:
        print fc
        continue

# Permanent except MIX
import os
import arcpy
import itertools
import csv
import numpy
folderPath = r"E:\fix_noWM" 
arcpy.env.workspace=folderPath
arcpy.env.overwriteOutput = True 
fcs = [fc for fc in arcpy.ListFeatureClasses() if not fc.endswith("21.shp") and not os.path.splitext(fc)[0].startswith('Mix')]  ## APLICAR A LOS NO HERBÁCEOS excepto Mixtos, que no tiene EUHA
print fcs
for fc in fcs:
    expression = "miFunc(!Nut2!, !EUHA_DEF!, !sumha!)"
    codeblock = """def miFunc(miNut2, miEU, miSumaCOR):
        if miEU == 0:
            return miSumaCOR
        else:
            return miEU
        """
    try:
        arcpy.AddField_management(fc, "NN_EUHA", "FLOAT","", "", "", "NN_EUHA", "NULLABLE", "NON_REQUIRED", "")
        arcpy.CalculateField_management(fc, "NN_EUHA", expression, "PYTHON_9.3", codeblock)
    except:
        print fc
        continue

## all but MixCrops: hectares distribution (we have already chosen between hectares either CORINE or EUROSTAT by NUT2, now we distribute these considering the percent of the real surface of each row)
import arcpy, os, numpy
from arcpy import env
ws = r"E:\fix_noWM"
arcpy.env.workspace = ws
fcs = [fc for fc in arcpy.ListFeatureClasses() if not fc.startswith("Mix")] 
for fc in fcs:
    name = 'EUSTha_NN'  
    expression = '!prcntha_NN!*!NN_EUHA!' 
    try:
        arcpy.AddField_management(fc, name, "FLOAT","", "", "", name, "NULLABLE", "NON_REQUIRED", "")
        arcpy.CalculateField_management(fc, name, expression, "PYTHON_9.3")
    except:
        print fc
        continue

## this is equivalent to EUSTha_NN. the conditional inside is the same as the NN_EUHA field, but the choice of hectares is based on the rows distributed values
# HAf_NN
# permanent except Mix crops
import os
import arcpy
import itertools
import csv
folderPath = r"E:\fix_noWM"
arcpy.env.workspace=folderPath
arcpy.env.overwriteOutput = True 
fcs = [fc for fc in arcpy.ListFeatureClasses() if not fc.endswith("21.shp") and not os.path.splitext(fc)[0].startswith('Mix')]
#print fcs
for fc in fcs:
    fieldName = "HAf_NN"
    arcpy.AddField_management(fc,"HAf_NN","FLOAT","", "", "", "HAf_NN", "NULLABLE", "NON_REQUIRED", "") 
    expression = "REALSURF(float(!ha_NN!), float(!EUSTha_NN!),float(!sumha!),float(!EUHA_DEF!))"
    codeblock = """def REALSURF(valCORha, valEUha, valsumCOR, valsumEU):
       if valsumEU < valsumCOR and valsumEU == 0:
           HAf_NN = valCORha
           return HAf_NN
       elif valsumEU < valsumCOR and valsumEU > 0:
           HAf_NN = valEUha
           return HAf_NN
       else: 
           HAf_NN = valCORha 
           return HAf_NN"""
    try:
        arcpy.CalculateField_management(fc, fieldName, expression, "PYTHON_9.3", codeblock)
    except:
        print fc
        continue

# herbaceous
import os
import arcpy
import itertools
import csv
folderPath = r"E:\fix_noWM"
arcpy.env.workspace=folderPath
arcpy.env.overwriteOutput = True 
fcs = [fc for fc in arcpy.ListFeatureClasses() if fc.endswith("21.shp")]
for fc in fcs:
    fieldName = "HAf_NN"
    arcpy.AddField_management(fc,"HAf_NN","FLOAT","", "", "", "HAf_NN", "NULLABLE", "NON_REQUIRED", "") 
    expression = "REALSURF(float(!ha_NN!), float(!EUSTha_NN!),float(!sumha!),float(!EUHA_DEF!))"
    codeblock = """def REALSURF(valCORha, valEUha, valsumCOR, valsumEU):
       if valsumEU < valsumCOR and valsumEU == 0:
           HAf_NN = valEUha
           return HAf_NN
       elif valsumEU < valsumCOR and valsumEU > 0:
           HAf_NN = valEUha
           return HAf_NN
       else: 
           HAf_NN = valCORha 
           return HAf_NN"""
    try:
        arcpy.CalculateField_management(fc, fieldName, expression, "PYTHON_9.3", codeblock)
    except:
        print fc
        continue
 
### POTENTIAL BIOMASS NEW
## We can now recompute the potential biomass applying a conditional to apply either CORINE/EUROSTAT hectares    
# as we already have the sum of hectares for the NUT2 for CORINE and the sum of hectares: OK. and it is exactly the same as percent_NN * OLD POTENTIAL
# easy way: TDMHA*HAf_NN
## potential biomass can be computed directly TDMHA*HAf (because HAf is the result of applying the conditionals to choose between the hectares of CORINE or the hectares of EUROSTAT distributed)
import os
import arcpy
import itertools
folderPath = r"E:\fix_noWM"
arcpy.env.workspace=folderPath
fcs = [fc for fc in arcpy.ListFeatureClasses() if not fc.startswith("Mix")]
for fc in fcs:
    name = 'NN_POT'
    expression = "miFunc(!TDMHA!, !HAf_NN!)"
    codeblock = """def miFunc(miTDMHA, misuperficie):
        d = miTDMHA * misuperficie
        return d""" 
    arcpy.AddField_management(fc, name, "FLOAT","", "", "", name, "NULLABLE", "NON_REQUIRED", "")
    arcpy.CalculateField_management(fc, name, expression, "PYTHON_9.3", codeblock)
#
import os
import arcpy
import itertools
folderPath = r"E:\fix_noWM"
arcpy.env.workspace=folderPath
fcs = [fc for fc in arcpy.ListFeatureClasses() if fc.startswith("Mix")]
for fc in fcs:
    name = 'NN_POT'
    expression = "miFunc(!TDMHA!, !ha_NN!)"
    codeblock = """def miFunc(miTDMHA, misuperficie):
        d = miTDMHA * misuperficie
        return d""" 
    arcpy.AddField_management(fc, name, "FLOAT","", "", "", name, "NULLABLE", "NON_REQUIRED", "")
    arcpy.CalculateField_management(fc, name, expression, "PYTHON_9.3", codeblock)

# equivalent to the easy way of computing potential biomass
# herbaceous
import os
import arcpy
import itertools
import csv
import numpy
folderPath = r"E:\fix_noWM"
arcpy.env.workspace=folderPath
arcpy.env.overwriteOutput = True 
fcs = [fc for fc in arcpy.ListFeatureClasses() if fc.startswith("Irrigated")]
print fcs 
for fc in fcs:
    field = "POT"
    expression = "miFunc(!TDMHA!, !EUSTha_NN!, !ha_NN!, !sumha!, !EUHA_DEF!)"
    codeblock = """def miFunc(miTD, miEU, miHA, miSumaCOR, miSumaEUSTAT):
        if miSumaEUSTAT > miSumaCOR:
            result = miTD*miHA
            return result
        elif miSumaEUSTAT < miSumaCOR and miSumaEUSTAT ==0:
            result = miTD*miEU
            return result
        else:
            result = miTD*miEU
            return result
        """
    try:
        arcpy.AddField_management(fc, "POT", "FLOAT","", "", "", "POT", "NULLABLE", "NON_REQUIRED", "")
        arcpy.CalculateField_management(fc, field, expression, "PYTHON_9.3", codeblock)
    except:
        print fc 
        continue


# permanent (Olive, Orchard, Vineyard) 
import os
import arcpy
import itertools
import csv
import numpy
folderPath = r"E:\fix_noWM"
arcpy.env.workspace=folderPath
arcpy.env.overwriteOutput = True 
fcs = [fc for fc in arcpy.ListFeatureClasses() if not fc.endswith("21.shp") and not os.path.splitext(fc)[0].startswith('Mix')] 
for fc in fcs:
    expression = "miFunc(!Nut2!, !TDMHA!, !EUSTha_NN!, !ha_NN!, !sumha!, !EUHA_DEF!)"
    codeblock = """def miFunc(miNut2, miTD, miEU, miHA, miSumaCOR, miSumaEUSTAT):
        if miSumaEUSTAT > miSumaCOR:
            return miTD*miHA
        elif miSumaEUSTAT < miSumaCOR and miSumaEUSTAT > 0:
            return miTD*miEU
        else:
            return miTD*miHA
        """
    try:
        arcpy.AddField_management(fc, "POT", "FLOAT","", "", "", "POT", "NULLABLE", "NON_REQUIRED", "")
        arcpy.CalculateField_management(fc, "POT", expression, "PYTHON_9.3", codeblock)
    except:
        print fc
        continue
  
## AVAILABLE BIOMASS NEW 
import os
import arcpy
import itertools
folderPath = r"E:\fix_noWM"
arcpy.env.workspace=folderPath
fcs = arcpy.ListFeatureClasses()
for fc in fcs:
    name = 'NN_AV'
    expression = "miFunc(!NN_POT!, !PCT!)"
    codeblock = """def miFunc(mipotencial, miconstraint):
        d = mipotencial*miconstraint
        return d""" 
    try:
        arcpy.AddField_management(fc, name, "FLOAT","", "", "", name, "NULLABLE", "NON_REQUIRED", "")
        arcpy.CalculateField_management(fc, name, expression, "PYTHON_9.3", codeblock)
    except: 
        print fc
        continue

#
import os
import arcpy
import itertools
folderPath = r"E:\fix_noWM"
arcpy.env.workspace=folderPath
fcs = arcpy.ListFeatureClasses()
for fc in fcs:
    name = 'AV'
    expression = "miFunc(!Nut2!, !POT!, !PCT!)"
    codeblock = """def miFunc(miNut2, mipotencial, miconstraint):
        d = mipotencial * miconstraint
        return d""" 
    arcpy.AddField_management(fc, name, "FLOAT","", "", "", name, "NULLABLE", "NON_REQUIRED", "")
    arcpy.CalculateField_management(fc, name, expression, "PYTHON_9.3", codeblock)
    
 ## COSTS
 ## COST1 dependent on t/ha available biomass (herbaceous crops)
# compute new field: avidivha = Available biomass/hectares (used in computations) NN_AV and HAf_NN
import os
import arcpy
import itertools
import csv
folderPath = r"E:\fix_noWM"
arcpy.env.workspace=folderPath
arcpy.env.overwriteOutput = True
fcs = arcpy.ListFeatureClasses("*_21.shp")
for fc in fcs:
    fieldName = "avdivha"
    expression = "miFunc(!NN_AV!, !HAf_NN!)"
    codeblock = """def miFunc(miavailable, misuperficie):
        if misuperficie == 0:
            result = 0
            return result
        else:
            result = miavailable/misuperficie
            return result""" 
    try:
        arcpy.AddField_management(fc, fieldName, "FLOAT","", "", "", fieldName, "NULLABLE", "NON_REQUIRED", "")
        arcpy.CalculateField_management(fc, fieldName, expression, "PYTHON_9.3", codeblock)
    except: 
        print fc
        continue

#cost1 herbaceous
import os
import arcpy
import itertools
import csv
folderPath = r"E:\fix_noWM"
arcpy.env.workspace=folderPath
arcpy.env.overwriteOutput = True
fcs = arcpy.ListFeatureClasses("*_21.shp")
for fc in fcs:
    fieldName = "cost1_NN"
    arcpy.AddField_management(fc,"cost1_NN","FLOAT","", "", "", "cost1_NN", "NULLABLE", "NON_REQUIRED", "") 
    expression = "CBALE(float(!NN_AV!), float(!HAf_NN!),float(!avdivha!))"
    codeblock = """def CBALE(valAvailable, valha, valavdivha):
       if (valavdivha == 0):
           cost1_NN = 0
           return cost1_NN
       elif (valavdivha < 0.8) and (valavdivha > 0):
           cost1_NN = 40 * (0.8**-0.7)
           return cost1_NN
       elif (valavdivha > 0.8) and (valavdivha < 14):
           cost1_NN= 40 * ((valAvailable/valha)**-0.7)
           return cost1_NN
       else:
           cost1_NN = 40 * (14**-0.7)
           return cost1_NN"""
    try:
        arcpy.CalculateField_management(fc, fieldName, expression, "PYTHON_9.3", codeblock)
    except:
        print fc
        continue
 
 ## COST2
 ## columna con coste2 fijo 8.9
import os
import arcpy
import itertools
import csv
folderPath = r"E:\fix_noWM"
arcpy.env.workspace=folderPath
arcpy.env.overwriteOutput = True
fcs = arcpy.ListFeatureClasses("*_21.shp","All")
for fc in fcs:
    fieldName = "cost2_NN"
    arcpy.AddField_management(fc,"cost2_NN","FLOAT","", "", "", "cost2_NN", "NULLABLE", "NON_REQUIRED", "") # this will be the final potential resources NEEDS CALCULATEFIELD MANAGEMENT AFTER SOIL LOSS RESTRICTIONS AND CARBON RESTRICTIONS
    expression = "COST2FIX(float(!NN_AV!))"
    codeblock = """def COST2FIX(valtDMdd):
       if (valtDMdd == 0):
           cost2_NN = 0
           return cost2_NN
       else: 
           cost2_NN = 8.9 
           return cost2_NN"""
    try:
        arcpy.CalculateField_management(fc, fieldName, expression, "PYTHON_9.3", codeblock)
    except:
        print fc
        continue

## COST 3 = cost1 + cost2
## total cost: cost3
import os
import arcpy
import itertools
import csv
folderPath = r"E:\fix_noWM"
arcpy.env.workspace=folderPath
arcpy.env.overwriteOutput = True
fcs = arcpy.ListFeatureClasses("*_21.shp","All")
for fc in fcs:
    fieldName = "cost3_NN"
    arcpy.AddField_management(fc,"cost3_NN","FLOAT","", "", "", "cost3_NN", "NULLABLE", "NON_REQUIRED", "") # this will be the final potential resources NEEDS CALCULATEFIELD MANAGEMENT AFTER SOIL LOSS RESTRICTIONS AND CARBON RESTRICTIONS
    expression = "(float(!cost1_NN!) + float(!cost2_NN!))"
    try:
        arcpy.CalculateField_management(fc, fieldName, expression, "PYTHON_9.3")
    except:
        print fc
        continue

### FIXCOSTS FOR PERMANENT CROPS AND MIX
# costs for non herbaceous crops for 221 Vineyard, 222 Orchards, 223  Olive CORINE CODES:
import os
import arcpy
import itertools
import csv
folderPath = r"E:\fix_noWM"
arcpy.env.workspace=folderPath
arcpy.env.overwriteOutput = True
fcs = [fc for fc in arcpy.ListFeatureClasses() if fc.startswith("Vineyard")]
for fc in fcs:
    fieldName = "costfix_NN"
    arcpy.AddField_management(fc,"costfix_NN","FLOAT","", "", "", "costfix_NN", "NULLABLE", "NON_REQUIRED", "") # this will be the final potential resources NEEDS CALCULATEFIELD MANAGEMENT AFTER SOIL LOSS RESTRICTIONS AND CARBON RESTRICTIONS
    expression = "COSTFIX(float(!NN_AV!))"
    codeblock = """def COSTFIX(valtDMdd):
       if (valtDMdd == 0):
           costfix_NN = 0
           return costfix_NN
       else: 
           costfix_NN = 47   
           return costfix_NN"""
    try:
        arcpy.CalculateField_management(fc, fieldName, expression, "PYTHON_9.3", codeblock)
    except:
        print fc
        continue


import os
import arcpy
import itertools
import csv
folderPath = r"E:\fix_noWM"
arcpy.env.workspace=folderPath
arcpy.env.overwriteOutput = True
fcs = [fc for fc in arcpy.ListFeatureClasses() if fc.startswith("Olive")]
for fc in fcs:
    fieldName = "costfix_NN"
    arcpy.AddField_management(fc,"costfix_NN","FLOAT","", "", "", "costfix_NN", "NULLABLE", "NON_REQUIRED", "") # this will be the final potential resources NEEDS CALCULATEFIELD MANAGEMENT AFTER SOIL LOSS RESTRICTIONS AND CARBON RESTRICTIONS
    expression = "COSTFIX(float(!NN_AV!))"
    codeblock = """def COSTFIX(valtDMdd):
       if (valtDMdd == 0):
           costfix_NN = 0
           return costfix_NN
       else: 
           costfix_NN = 38   ### CHANGE THIS BIT FOR OLIVE
           return costfix_NN"""
    try:
        arcpy.CalculateField_management(fc, fieldName, expression, "PYTHON_9.3", codeblock)
    except:
        print fc
        continue

import os
import arcpy
import itertools
import csv
folderPath = r"E:\fix_noWM"
arcpy.env.workspace=folderPath
arcpy.env.overwriteOutput = True
fcs = [fc for fc in arcpy.ListFeatureClasses() if fc.startswith("Orchard")]
for fc in fcs:
    fieldName = "costfix_NN"
    arcpy.AddField_management(fc,"costfix_NN","FLOAT","", "", "", "costfix_NN", "NULLABLE", "NON_REQUIRED", "") # this will be the final potential resources NEEDS CALCULATEFIELD MANAGEMENT AFTER SOIL LOSS RESTRICTIONS AND CARBON RESTRICTIONS
    expression = "COSTFIX(float(!NN_AV!))"
    codeblock = """def COSTFIX(valtDMdd):
       if (valtDMdd == 0):
           costfix_NN = 0
           return costfix_NN
       else: 
           costfix_NN = 50   ### CHANGE THIS BIT FOR VINEYARD
           return costfix_NN"""
    try:
        arcpy.CalculateField_management(fc, fieldName, expression, "PYTHON_9.3", codeblock)
    except:
        print fc
        continue

### 241 POTENTIAL/AVAILABLE/COSTS
# directly apply TDMA * ha CORINE 
# costs
## COSTfix
 ## columna con coste2 fijo 8.9
import os
import arcpy
import itertools
import csv
folderPath = r"E:\fix_noWM"
arcpy.env.workspace=folderPath
arcpy.env.overwriteOutput = True
fcs = [fc for fc in arcpy.ListFeatureClasses() if fc.startswith("Mix")]
for fc in fcs:
    fieldName = "costfix_NN"
    arcpy.AddField_management(fc,"costfix_NN","FLOAT","", "", "", "costfix_NN", "NULLABLE", "NON_REQUIRED", "") # this will be the final potential resources NEEDS CALCULATEFIELD MANAGEMENT AFTER SOIL LOSS RESTRICTIONS AND CARBON RESTRICTIONS
    expression = "COSTFIX(float(!NN_AV!))"
    codeblock = """def COSTFIX(valtDMdd):
       if (valtDMdd == 0):
           costfix_NN = 0
           return costfix_NN
       else: 
           costfix_NN = 45 
           return costfix_NN"""
    try:
        arcpy.CalculateField_management(fc, fieldName, expression, "PYTHON_9.3", codeblock)
    except:
        print fc
        continue

## dropfield/clean/project for TFS
names
Potential tDMpf1/tDMp (Mix)
Available tDMdf1/tDMd (Mix)
surface HAf/ha (Mix)
costs = cost1
cost



